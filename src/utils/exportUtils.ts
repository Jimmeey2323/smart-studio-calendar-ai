import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { ScheduledClass } from '../types';

interface ExportOptions {
  includeTeacherInfo: boolean;
  includeStats: boolean;
  dateRange: string;
  location: string;
}

export const exportToPDF = async (classes: ScheduledClass[], options: ExportOptions) => {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(88, 28, 135); // Purple color
  pdf.text('Smart Class Schedule', 20, 25);
  
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated on ${new Date().toLocaleDateString()}`, 20, 35);
  
  if (options.location !== 'all') {
    pdf.text(`Location: ${options.location}`, 20, 45);
  }
  
  let yPosition = 55;
  
  // Statistics Section
  if (options.includeStats) {
    pdf.setFontSize(16);
    pdf.setTextColor(0, 0, 0);
    pdf.text('Schedule Statistics', 20, yPosition);
    yPosition += 10;
    
    const totalClasses = classes.length;
    const uniqueTeachers = new Set(classes.map(cls => `${cls.teacherFirstName} ${cls.teacherLastName}`)).size;
    const totalHours = classes.reduce((sum, cls) => sum + parseFloat(cls.duration), 0);
    const avgParticipants = classes.reduce((sum, cls) => sum + (cls.participants || 0), 0) / totalClasses || 0;
    
    pdf.setFontSize(10);
    pdf.setTextColor(60, 60, 60);
    pdf.text(`Total Classes: ${totalClasses}`, 20, yPosition);
    pdf.text(`Teachers: ${uniqueTeachers}`, 70, yPosition);
    pdf.text(`Total Hours: ${totalHours.toFixed(1)}`, 120, yPosition);
    pdf.text(`Avg Participants: ${Math.round(avgParticipants)}`, 160, yPosition);
    yPosition += 20;
  }
  
  // Classes by Day
  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
  
  days.forEach(day => {
    const dayClasses = classes.filter(cls => cls.day === day).sort((a, b) => a.time.localeCompare(b.time));
    
    if (dayClasses.length > 0) {
      // Check if we need a new page
      if (yPosition > pageHeight - 60) {
        pdf.addPage();
        yPosition = 20;
      }
      
      pdf.setFontSize(14);
      pdf.setTextColor(0, 0, 0);
      pdf.text(day, 20, yPosition);
      yPosition += 8;
      
      dayClasses.forEach(cls => {
        if (yPosition > pageHeight - 20) {
          pdf.addPage();
          yPosition = 20;
        }
        
        pdf.setFontSize(10);
        pdf.setTextColor(60, 60, 60);
        
        let classText = `${cls.time} - ${cls.classFormat}`;
        if (options.includeTeacherInfo) {
          classText += ` (${cls.teacherFirstName} ${cls.teacherLastName})`;
        }
        classText += ` - ${parseFloat(cls.duration) * 60}min`;
        
        pdf.text(classText, 25, yPosition);
        
        if (cls.participants) {
          pdf.text(`${cls.participants} participants`, 25, yPosition + 5);
        }
        
        yPosition += 12;
      });
      
      yPosition += 5;
    }
  });
  
  // Footer
  pdf.setFontSize(8);
  pdf.setTextColor(150, 150, 150);
  pdf.text('Generated by Smart Class Scheduler', 20, pageHeight - 10);
  
  pdf.save(`schedule-${options.location === 'all' ? 'all-locations' : options.location.replace(/[^a-zA-Z0-9]/g, '-')}-${new Date().toISOString().split('T')[0]}.pdf`);
};

export const exportToCSV = async (classes: ScheduledClass[], options: ExportOptions) => {
  const headers = [
    'Day',
    'Time',
    'Class Format',
    'Duration (minutes)',
    'Location'
  ];
  
  if (options.includeTeacherInfo) {
    headers.push('Teacher First Name', 'Teacher Last Name');
  }
  
  if (options.includeStats) {
    headers.push('Expected Participants', 'Expected Revenue');
  }
  
  const csvContent = [
    headers.join(','),
    ...classes.map(cls => {
      const row = [
        cls.day,
        cls.time,
        `"${cls.classFormat}"`,
        (parseFloat(cls.duration) * 60).toString(),
        `"${cls.location}"`
      ];
      
      if (options.includeTeacherInfo) {
        row.push(cls.teacherFirstName, cls.teacherLastName);
      }
      
      if (options.includeStats) {
        row.push(
          (cls.participants || 0).toString(),
          (cls.revenue || 0).toString()
        );
      }
      
      return row.join(',');
    })
  ].join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `schedule-${options.location === 'all' ? 'all-locations' : options.location.replace(/[^a-zA-Z0-9]/g, '-')}-${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const exportToCalendar = async (classes: ScheduledClass[], options: ExportOptions) => {
  const formatDate = (day: string, time: string) => {
    const today = new Date();
    const dayIndex = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].indexOf(day);
    const currentDay = today.getDay();
    
    let daysUntilTarget = dayIndex - currentDay;
    if (daysUntilTarget < 0) daysUntilTarget += 7;
    
    const targetDate = new Date(today);
    targetDate.setDate(today.getDate() + daysUntilTarget);
    
    const [hours, minutes] = time.split(':').map(Number);
    targetDate.setHours(hours, minutes, 0, 0);
    
    return targetDate.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  };
  
  const formatEndDate = (startDate: string, duration: string) => {
    const start = new Date(startDate.replace(/(\d{4})(\d{2})(\d{2})T(\d{2})(\d{2})(\d{2})Z/, '$1-$2-$3T$4:$5:$6Z'));
    const end = new Date(start.getTime() + parseFloat(duration) * 60 * 60 * 1000);
    return end.toISOString().replace(/[-:]/g, '').split('.')[0] + 'Z';
  };
  
  let icsContent = [
    'BEGIN:VCALENDAR',
    'VERSION:2.0',
    'PRODID:-//Smart Class Scheduler//EN',
    'CALSCALE:GREGORIAN',
    'METHOD:PUBLISH'
  ];
  
  classes.forEach((cls, index) => {
    const startDate = formatDate(cls.day, cls.time);
    const endDate = formatEndDate(startDate, cls.duration);
    
    let summary = cls.classFormat;
    let description = `Class: ${cls.classFormat}\\nDuration: ${parseFloat(cls.duration) * 60} minutes`;
    
    if (options.includeTeacherInfo) {
      summary += ` - ${cls.teacherFirstName} ${cls.teacherLastName}`;
      description += `\\nTeacher: ${cls.teacherFirstName} ${cls.teacherLastName}`;
    }
    
    if (options.includeStats && cls.participants) {
      description += `\\nExpected Participants: ${cls.participants}`;
    }
    
    icsContent.push(
      'BEGIN:VEVENT',
      `UID:${cls.id}@smartclassscheduler.com`,
      `DTSTART:${startDate}`,
      `DTEND:${endDate}`,
      `SUMMARY:${summary}`,
      `DESCRIPTION:${description}`,
      `LOCATION:${cls.location}`,
      'STATUS:CONFIRMED',
      'TRANSP:OPAQUE',
      'END:VEVENT'
    );
  });
  
  icsContent.push('END:VCALENDAR');
  
  const blob = new Blob([icsContent.join('\r\n')], { type: 'text/calendar;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `schedule-${options.location === 'all' ? 'all-locations' : options.location.replace(/[^a-zA-Z0-9]/g, '-')}-${new Date().toISOString().split('T')[0]}.ics`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const printSchedule = async (classes: ScheduledClass[], options: ExportOptions) => {
  const printWindow = window.open('', '_blank');
  if (!printWindow) return;
  
  const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
  
  let html = `
    <!DOCTYPE html>
    <html>
    <head>
      <title>Class Schedule</title>
      <style>
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          margin: 20px;
          color: #333;
          line-height: 1.6;
        }
        .header {
          text-align: center;
          margin-bottom: 30px;
          border-bottom: 3px solid #8B5CF6;
          padding-bottom: 20px;
        }
        .header h1 {
          color: #8B5CF6;
          margin: 0;
          font-size: 28px;
        }
        .header p {
          color: #666;
          margin: 5px 0;
        }
        .stats {
          display: grid;
          grid-template-columns: repeat(4, 1fr);
          gap: 20px;
          margin-bottom: 30px;
          padding: 20px;
          background: #f8f9fa;
          border-radius: 8px;
        }
        .stat {
          text-align: center;
        }
        .stat-value {
          font-size: 24px;
          font-weight: bold;
          color: #8B5CF6;
        }
        .stat-label {
          color: #666;
          font-size: 14px;
        }
        .day-section {
          margin-bottom: 30px;
          break-inside: avoid;
        }
        .day-header {
          background: linear-gradient(135deg, #8B5CF6, #EC4899);
          color: white;
          padding: 12px 20px;
          border-radius: 8px;
          font-size: 18px;
          font-weight: bold;
          margin-bottom: 15px;
        }
        .class-item {
          background: white;
          border: 1px solid #e5e7eb;
          border-radius: 6px;
          padding: 15px;
          margin-bottom: 10px;
          box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .class-header {
          display: flex;
          justify-content: between;
          align-items: center;
          margin-bottom: 8px;
        }
        .class-time {
          font-weight: bold;
          color: #8B5CF6;
          font-size: 16px;
        }
        .class-name {
          font-weight: 600;
          color: #1f2937;
          font-size: 16px;
        }
        .class-details {
          color: #6b7280;
          font-size: 14px;
        }
        .teacher-info {
          color: #059669;
          font-weight: 500;
        }
        .location-info {
          color: #dc2626;
          font-weight: 500;
        }
        @media print {
          body { margin: 0; }
          .day-section { page-break-inside: avoid; }
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>Smart Class Schedule</h1>
        <p>Generated on ${new Date().toLocaleDateString()}</p>
        ${options.location !== 'all' ? `<p>Location: ${options.location}</p>` : ''}
      </div>
  `;
  
  if (options.includeStats) {
    const totalClasses = classes.length;
    const uniqueTeachers = new Set(classes.map(cls => `${cls.teacherFirstName} ${cls.teacherLastName}`)).size;
    const totalHours = classes.reduce((sum, cls) => sum + parseFloat(cls.duration), 0);
    const avgParticipants = classes.reduce((sum, cls) => sum + (cls.participants || 0), 0) / totalClasses || 0;
    
    html += `
      <div class="stats">
        <div class="stat">
          <div class="stat-value">${totalClasses}</div>
          <div class="stat-label">Total Classes</div>
        </div>
        <div class="stat">
          <div class="stat-value">${uniqueTeachers}</div>
          <div class="stat-label">Teachers</div>
        </div>
        <div class="stat">
          <div class="stat-value">${totalHours.toFixed(1)}</div>
          <div class="stat-label">Total Hours</div>
        </div>
        <div class="stat">
          <div class="stat-value">${Math.round(avgParticipants)}</div>
          <div class="stat-label">Avg Participants</div>
        </div>
      </div>
    `;
  }
  
  days.forEach(day => {
    const dayClasses = classes.filter(cls => cls.day === day).sort((a, b) => a.time.localeCompare(b.time));
    
    if (dayClasses.length > 0) {
      html += `
        <div class="day-section">
          <div class="day-header">${day}</div>
      `;
      
      dayClasses.forEach(cls => {
        html += `
          <div class="class-item">
            <div class="class-header">
              <span class="class-time">${cls.time}</span>
              <span class="class-name">${cls.classFormat}</span>
            </div>
            <div class="class-details">
              Duration: ${parseFloat(cls.duration) * 60} minutes
              ${options.includeTeacherInfo ? `<br><span class="teacher-info">Teacher: ${cls.teacherFirstName} ${cls.teacherLastName}</span>` : ''}
              <br><span class="location-info">Location: ${cls.location}</span>
              ${cls.participants ? `<br>Expected Participants: ${cls.participants}` : ''}
            </div>
          </div>
        `;
      });
      
      html += '</div>';
    }
  });
  
  html += `
      <div style="margin-top: 40px; text-align: center; color: #9ca3af; font-size: 12px;">
        Generated by Smart Class Scheduler
      </div>
    </body>
    </html>
  `;
  
  printWindow.document.write(html);
  printWindow.document.close();
  
  // Wait for content to load then print
  setTimeout(() => {
    printWindow.print();
    printWindow.close();
  }, 500);
};